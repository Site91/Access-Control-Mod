package com.cadergator10.advancedbasesecurity.common.tileentity;

import com.cadergator10.advancedbasesecurity.AdvBaseSecurity;
import com.cadergator10.advancedbasesecurity.common.globalsystems.DoorHandler;
import com.cadergator10.advancedbasesecurity.common.interfaces.IDevice;
import com.cadergator10.advancedbasesecurity.common.items.ItemDoorManager;
import net.minecraft.block.state.IBlockState;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.play.server.SPacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import java.util.UUID;

public class TileEntityDeviceBase extends TileEntity implements IDevice {
    UUID managerId = null;
    UUID deviceId = UUID.randomUUID();
    DoorHandler.Doors door = null;

    public NBTTagCompound pushMoretoUpdate(NBTTagCompound nbt){
        return nbt; //overridden by the other classes
    }
    @Override
    public NBTTagCompound getUpdateTag() {
        return pushMoretoUpdate(writeToNBT(super.getUpdateTag()));
    }
    @Override
    public SPacketUpdateTileEntity getUpdatePacket() {
        return new SPacketUpdateTileEntity(getPos(), 1, getUpdateTag());
    }
    @Override
    @SideOnly(Side.CLIENT)
    public void onDataPacket(NetworkManager net, SPacketUpdateTileEntity pkt) {
        readFromNBT(pkt.getNbtCompound());
    }

    @Override
    public void handleUpdateTag(NBTTagCompound tag) {
        readFromNBT(tag);
    }

    @Override
    public boolean shouldRefresh(World world, BlockPos pos, IBlockState oldState, IBlockState newState)
    {
        return (oldState.getBlock() != newState.getBlock());
    }

    @Override
    public void readFromNBT(NBTTagCompound nbt) {
        super.readFromNBT(nbt);
        if(nbt.hasUniqueId("deviceId"))
            this.deviceId = nbt.getUniqueId("deviceId");
        else
            this.deviceId = UUID.randomUUID();
        if(nbt.hasUniqueId("managerId"))
            this.managerId = nbt.getUniqueId("managerId");
        if(!nbt.hasKey("toclient") || !nbt.getBoolean("toclient")) {
            if (managerId != null)
                door = AdvBaseSecurity.instance.doorHandler.getDoorManager(managerId);
        }
    }

    @Override
    public NBTTagCompound writeToNBT(NBTTagCompound nbt) {
        super.writeToNBT(nbt);
        if(deviceId != null)
        nbt.setUniqueId("deviceId", this.deviceId);
        if(managerId != null)
            nbt.setUniqueId("managerId", this.managerId);
        return nbt;
    }

    @Override
    public void newId() {
        deviceId = UUID.randomUUID();
        managerId = null;
        markDirty();
    }

    @Override
    public UUID getId() {
        return deviceId;
    }

    @Override
    public String getDevType() {
        return "default";
    }

    @Override
    public void setDoor(ItemStack heldItem) {
        ItemDoorManager.ManagerTag cardTag = new ItemDoorManager.ManagerTag(heldItem);
        if(cardTag.doorIDScan != null && cardTag.currentScanMode == 1) {
            AdvBaseSecurity.instance.logger.info("Setting DoorController's ID of card id " + cardTag.doorIDScan);
            boolean found = AdvBaseSecurity.instance.doorHandler.SetDevID(deviceId, new DoorHandler.DoorIdentifier(cardTag.managerID, cardTag.doorIDScan), this.getDevType().equals("doorcontrol"));
            if(found){
                AdvBaseSecurity.instance.logger.info("Found door! Linking...");
                managerId = cardTag.managerID;
                markDirty();
                door = AdvBaseSecurity.instance.doorHandler.getDoorManager(managerId);
            }
        }
    }

    @Override
    public void onPlace() {
        //autogenerated stub
    }

    @Override
    public DoorHandler.Doors getDoor() {
        return door;
    }
}
